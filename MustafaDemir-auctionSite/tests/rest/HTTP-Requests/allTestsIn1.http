### GOOD GET request to filter games by title (correcte titel)
GET http://localhost:3000/games?title=Resident%20Evil
Content-Type: application/json

> {%
    client.test("Filter games by title works and returns games", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length !== 0, "Expected a filled array");
    });
%}

### GOOD GET request to filter games by price up to 60 euro
GET http://localhost:3000/games?startPrice=60
Content-Type: application/json

> {%
    client.test("Filter games by price up to 60 works and returns games", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length !== 0, "Expected a filled array");
    });
%}

### GOOD GET request to filter games by title and publisher
GET http://localhost:3000/games?title=Resident%20Evil&publisher=Capcom
Content-Type: application/json

> {%
    client.test("Filter games by title and publisher works and returns games", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length !== 0, "Expected a filled array");
    });
%}

###
// BAD WEATHER TESTS

### BAD GET request to filter games by non-existent title
GET http://localhost:3000/games?title=NonExistingTitle
Content-Type: application/json

> {%
    client.test("Non-existent title returns 404", function () {
        client.assert(response.status === 404, "Expected status 404, but got " + response.status);
    });
%}

### BAD GET request to filter games by non-existent category
GET http://localhost:3000/games?category=InvalidCategory
Content-Type: application/json

> {%
    client.test("Non-existent category returns 404", function () {
        client.assert(response.status === 404, "Expected status 404, but got " + response.status);
    });
%}

### BAD GET request to filter games by non-existent publisher
GET http://localhost:3000/games?publisher=UnknownPublisher
Content-Type: application/json

> {%
    client.test("Non-existent publisher returns 404", function () {
        client.assert(response.status === 404, "Expected status 404, but got " + response.status);
    });
%}

### BAD GET request to filter games with multiple invalid filters (title and category)
GET http://localhost:3000/games?title=NonExistingTitle&category=InvalidCategory
Content-Type: application/json

> {%
    client.test("Invalid title and category returns 404", function () {
        client.assert(response.status === 404, "Expected status 404, but got " + response.status);
    });
%}


### GOOD GET request to return bids for a specific game (with bids)
GET http://localhost:3000/games/1/bids
Accept: application/json

> {%
    client.test("Bids for game ID 1 retrieved successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(Array.isArray(response.body), "Expected an array of bids");
        client.assert(response.body.length > 0, "Expected bids to be present for game ID 1");
    });
%}

###

### GOOD GET request to return bids for a specific game (no bids)
GET http://localhost:3000/games/9/bids
Accept: application/json

> {%
    client.test("No bids found for game ID 2", function () {
        client.assert(response.status === 404, "Response status is not 200");
        client.assert(response.body.message === "No bids found for this game", "Expected 'No bids found for this game' message");
    });
%}


### BAD GET request for a non-existent game (game does not exist)
GET http://localhost:3000/games/999/bids
Accept: application/json

> {%
    client.test("Non-existent game ID returns 404", function () {
        client.assert(response.status === 404, "Expected 404 for non-existent game");
        client.assert(response.body.message.includes("does not exist"), "Expected 'Game with ID does not exist' message");
    });
%}

###

### BAD GET request with an invalid game ID (non-numeric)
GET http://localhost:3000/games/abc/bids
Accept: application/json

> {%
    client.test("Invalid game ID returns 400 Bad Request", function () {
        client.assert(response.status === 400, "Expected status 400 for invalid game ID");
        client.assert(response.body.message === "Invalid game ID", "Expected 'Invalid game ID' message");
    });
%}

### GOOD GET request to return a specific game by valid ID
GET http://localhost:3000/games/1
Accept: application/json

> {%
    client.test("Specific game with ID 1 retrieved successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(typeof response.body === "object", "Expected a game object");
        client.assert(response.body.gameId === 1, "Expected game ID to be 1");
    });
%}

### BAD REQUESTS!!!

### BAD GET request for a non-existent game
GET http://localhost:3000/games/999
Accept: application/json

> {%
    client.test("Game with non-existent ID returns 404", function () {
        client.assert(response.status === 404, "Expected status 404, but got " + response.status);
    });
%}

###

### BAD GET request with invalid game ID (non-numeric input)
GET http://localhost:3000/games/abc
Accept: application/json

> {%
    client.test("Invalid game ID returns 400 Bad Request", function () {
        client.assert(response.status === 400, "Expected status 400 for invalid ID, but got " + response.status);
    });
%}

### GET request to example server
GET http://localhost:3000/won-auctions
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiZW1haWwiOiJlbW1hQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJpYXQiOjE3Mjg5MDQ3MDEsImV4cCI6MTcyODk5MTEwMX0.Z-evconqIdzwCl2iNdbzAaP-1hpm3R-PgII_hbf-tg0
Accept: application/json

> {%
    client.test("Valid request returns 200 OK", function () {
        client.assert(response.status === 200, "Expected status 200, but got " + response.status);
        client.assert(response.body.wonAuctions.length > 0, "Expected some won auctions to be returned.");
    });
    client.test("Response contains totalPayment", function () {
        client.assert(response.body.totalPayment !== undefined, "Expected totalPayment field in response.");
    });
%}

### BAD GET request with invalid token

GET http://localhost:3000/won-auctions
Authorization: Bearer hahahmal234324234
Accept: application/json

> {%
    client.test("No won auctions returns 401 Not Found", function () {
        client.assert(response.status === 401, "Expected status 401, but got " + response.status);
    });
%}

### GOOD POST request to log in a user
POST http://localhost:3000/users/login
Content-Type: application/json

{
  "email": "emma@example.com",
  "password": "hashedpassword3"
}

> {%
    client.test("User logged in successfully", function () {
        // Controleer of de status 200 is
        client.assert(response.status === 200, "Response status is not 200");

        // Controleer of de message exact "Login successful" is
        client.assert(response.body.message === "Login successful", "Expected 'Login successful' message");

        // Controleer of de gebruiker in de response de juiste e-mail heeft
        client.assert(response.body.user.email === "emma@example.com", "Expected email to be 'emma@example.com'");

        // Controleer of er een token wordt teruggestuurd
        client.assert(response.body.token, "Expected a token in the response");

        // Sla de token op in een variabele om te hergebruiken
        pm.environment.set("jwt_token", response.body.token);
        console.log("JWT-token opgeslagen:", response.body.token);
    });
%}



### GOOD POST request to add a new game
POST http://localhost:3000/games
Content-Type: application/json

{
  "gameId": 13,
  "title": "Resident Evil Village",
  "description": "A survival horror game",
  "publisher": "Capcom",
  "category": "Horror",
  "startingPrice": 59,
  "auctionEndDate": "2024-11-04",
  "bids": []
}

> {%
    client.test("Game added successfully", function () {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}


### BAD POST request - Missing required fields
POST http://localhost:3000/games
Content-Type: application/json

{
  "title": "Resident Evil Village"
}

> {%
    client.test("Missing fields results in 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message.includes("Missing required fields"), "Expected missing fields error");
    });
%}

### BAD POST request - Game with the same ID already exists
POST http://localhost:3000/games
Content-Type: application/json

{
  "gameId": 1,
  "title": "Duplicate Game",
  "description": "A duplicate game",
  "publisher": "Capcom",
  "category": "Horror",
  "startingPrice": 59,
  "auctionEndDate": "2024-11-04",
  "bids": []
}

> {%
    client.test("Game ID already exists results in 409 Conflict", function () {
        client.assert(response.status === 409, "Response status is not 409");
        client.assert(response.body.message.includes("already exists"), "Expected conflict error");
    });
%}

### GOOD POST request to add a new user
POST http://localhost:3000/users/register
Content-Type: application/json

{
  "username": "Mustafa D",
  "email": "demir61@gmail.com",
  "password": "password6183224"
}

> {%
    client.test("User added successfully", function () {
        console.log("Response status:", response.status);
        console.log("Response body:", response.body);

        // Controleer of de status 201 is
        client.assert(response.status === 201, "Response status is not 201. Received: " + response.status);

        // Controleer of de message "New user created" is
        client.assert(response.body.message === "New user created", "Expected 'New user created' message, but got: " + response.body.message);
    });
%}

### BAD POST request - Missing required fields
POST http://localhost:3000/users/register
Content-Type: application/json

{
  "emailadres": "john_doe"
}

> {%
    client.test("Missing fields results in 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message.includes("Missing required fields"), "Expected missing fields error");
    });
%}

### BAD POST request - User already exists
POST http://localhost:3000/users/register
Content-Type: application/json

{
  "username": "john_doe",
  "email": "john@example.com",
  "password": "hashedpassword1"
}

> {%
    client.test("User already exists results in 409 Conflict", function () {
        client.assert(response.status === 409, "Response status is not 409");
        client.assert(response.body.message.includes("already exists"), "Expected conflict error");
    });
%}

###
POST http://localhost:3000/games/1/bids
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "bidAmount": 80,
  "bidTime": "2024-09-25T10:00:00Z",
  "userId": 1,
  "gameId": 1
}

> {%
    client.test("Bid added successfully", function () {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.message === "Bid added successfully", "Expected 'Bid added successfully' message");
    });
%}

### BAD POST request - Missing required fields
POST http://localhost:3000/games/1/bids
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "bidAmount": 70
}

> {%
    client.test("Missing fields results in 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message.includes("Missing required fields"), "Expected missing fields error");
    });
%}

### BAD POST request - Game not found
POST http://localhost:3000/games/999/bids
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "bidAmount": 70,
  "bidTime": "2024-09-25T10:00:00Z",
  "userId": 1
}

> {%
    client.test("Game not found results in 404", function () {
        client.assert(response.status === 404, "Response status is not 404");
        client.assert(response.body.message.includes("Game with ID 999 not found"), "Expected not found error");
    });
%}

### BAD POST request - Invalid game ID
POST http://localhost:3000/games/abc/bids
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "bidAmount": 70,
  "bidTime": "2024-09-25T10:00:00Z",
  "userId": 1
}

> {%
    client.test("Invalid game ID results in 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message.includes("Invalid game ID"), "Expected invalid game ID error");
    });
%}




### BAD POST request - Missing required fields
POST http://localhost:3000/users/login
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "email": "emma@example213123.com"
}

> {%
    client.test("Missing fields results in 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");

        client.assert(response.body.message === "missing fields", "Expected missing fields error message");
    });
%}

### BAD POST request - Incorrect password
POST http://localhost:3000/users/login
Authorization: Bearer {{jwt_token}}
Content-Type: application/json

{
  "email": "emma@example.com",
  "password": "hashedpassword234234"
}

> {%
    client.test("Incorrect password results in 401 Unauthorized", function () {
        client.assert(response.status === 401, "Response status is not 401");
        client.assert(response.body.message.includes("Incorrect password"), "Expected unauthorized error");
    });
%}


### GOOD PUT request to update a specific game
PUT http://localhost:3000/games/1
Content-Type: application/json

{
  "title": "New Game Title",
  "description": "Updated description",
  "publisher": "Updated Publisher",
  "category": "Updated Category",
  "startingPrice": 75,
  "auctionEndDate": "2025-12-31"
}

> {%
    client.test("Game updated successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.message.includes("successfully updated"), "Expected success message");
        client.assert(response.body.game.title === "New Game Title", "Title should be updated");
    });
%}

### BAD PUT request - Missing required fields
PUT http://localhost:3000/games/1
Content-Type: application/json

{
  "title": "New Game Title",
  "category": "Updated Category",
  "startingPrice": 75
}

> {%
    client.test("Missing fields results in 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message.includes("Missing required fields"), "Expected missing fields error");
    });
%}

### BAD PUT request - Game ID does not exist
PUT http://localhost:3000/games/999
Content-Type: application/json

{
  "title": "New Game Title",
  "description": "Updated description",
  "publisher": "Updated Publisher",
  "category": "Updated Category",
  "startingPrice": 75,
  "auctionEndDate": "2025-12-31"
}

> {%
    client.test("Game ID not found results in 404", function () {
        client.assert(response.status === 404, "Response status is not 404");
        client.assert(response.body.message.includes("not found"), "Expected not found message");
    });
%}

### BAD PUT request - Invalid Game ID
PUT http://localhost:3000/games/abc
Content-Type: application/json

{
  "title": "New Game Title",
  "description": "Updated description",
  "publisher": "Updated Publisher",
  "category": "Updated Category",
  "startingPrice": 75,
  "auctionEndDate": "2025-12-31"
}

> {%
    client.test("Invalid Game ID returns 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message.includes("Invalid game ID"), "Expected invalid game ID error");
    });
%}


### GOOD DELETE request to remove a specific game
DELETE http://localhost:3000/games/1
Content-Type: application/json

> {%
    client.test("Game deleted successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.message.includes("successfully deleted"), "Expected success message");
    });
%}

### BAD DELETE request - Game ID does not exist
DELETE http://localhost:3000/games/999
Content-Type: application/json

> {%
    client.test("Game ID not found results in 404", function () {
        client.assert(response.status === 404, "Response status is not 404");
        client.assert(response.body.message.includes("not found"), "Expected not found message");
    });
%}

### BAD DELETE request - Invalid Game ID
DELETE http://localhost:3000/games/abc
Content-Type: application/json

> {%
    client.test("Invalid Game ID returns 400 Bad Request", function () {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message.includes("Invalid game ID"), "Expected invalid game ID error");
    });
%}